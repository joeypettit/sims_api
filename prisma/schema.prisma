generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model UserAccount {
  id        String    @id @default(uuid())
  email     String    @unique
  passwordHash  String
  role      UserRole  @default(USER)
  isBlocked Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  projects  Project[]
  userAccount UserAccount @relation(fields: [userAccountId], references: [id])
  userAccountId String @unique
}

model Client {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  projects  Project[]
}

// model PhoneNumber {
//   id          String @id @default(uuid())
//   countryCode String
//   areaCode    String
//   number      String
//   extension   String
//   type        String
//   clientId    String
//   client      Client @relation(fields: [clientId], references: [id])
// }

model Project {
  id          String        @id @default(uuid())
  name        String
  description String
  clients     Client[]
  users       User[]
  areas       ProjectArea[]
}

model ProjectArea {
  id             String          @id @default(uuid())
  name           String?
  projectId      String?
  project        Project?        @relation(fields: [projectId], references: [id])
  lineItemGroups LineItemGroup[]
  template       AreaTemplate?
}

model LineItem {
  id              String           @id @default(uuid())
  name            String
  quantity        Float
  unitId          String?
  marginDecimal   Float
  unit            LineItemUnit?    @relation(fields: [unitId], references: [id])
  indexInGroup    Int              @default(0)
  lineItemOptions LineItemOption[]
  lineItemGroupId String
  lineItemGroup   LineItemGroup    @relation(fields: [lineItemGroupId], references: [id], onDelete: Cascade)
}

model LineItemUnit {
  id        String     @id @default(uuid())
  name      String
  lineItems LineItem[]
}

model LineItemOption {
  id                        String      @id @default(uuid())
  lowCostInDollarsPerUnit   Float?
  highCostInDollarsPerUnit  Float?
  exactCostInDollarsPerUnit Float?
  priceAdjustmentMultiplier Float       @default(1)
  description               String
  optionTierId              String?
  optionTier                OptionTier? @relation(fields: [optionTierId], references: [id])
  isSelected                Boolean
  lineItemId                String
  lineItem                  LineItem    @relation(fields: [lineItemId], references: [id], onDelete: Cascade)
}

model LineItemGroup {
  id              String        @id @default(uuid())
  name            String
  projectAreaId   String
  projectArea     ProjectArea   @relation(fields: [projectAreaId], references: [id], onDelete: Cascade)
  groupCategoryId String
  groupCategory   GroupCategory @relation(fields: [groupCategoryId], references: [id])
  lineItems       LineItem[]
  isOpen          Boolean       @default(false)
  indexInCategory Int           @default(0)
}

model GroupCategory {
  id            String          @id @default(uuid())
  name          String
  LineItemGroup LineItemGroup[]
}

model OptionTier {
  id             String           @id @default(uuid())
  tierLevel      Int
  name           String
  lineItemOption LineItemOption[]
}

model AreaTemplate {
  id            String      @id @default(uuid())
  name          String
  projectAreaId String      @unique
  projectArea   ProjectArea @relation(fields: [projectAreaId], references: [id])
}

model Session {
  id        String   @id
  data      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
